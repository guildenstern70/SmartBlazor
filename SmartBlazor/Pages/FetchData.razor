 @**
  
  Project SmartBlazor
  Copyright (C) 2021 Alessio Saltarin 'alessiosaltarin@gmail.com'
  This software is licensed under MIT License. See LICENSE.
  
 **@

@page "/fetchdata"

<PageTitle>Weather forecast</PageTitle>

@using Microsoft.EntityFrameworkCore
@using SmartBlazor.Data
@using SmartBlazor.Data.Model
@using SmartBlazor.Service

@implements IDisposable
@inject IDbContextFactory<SmartBlazorDbContext> _dbFactory

<section class="section">

    <SmartBlazor.Components.PageHeader Title="Weather forecast" />

    <div>
        <p>Weather Forecast Service:</p>
        <div class="mt-4">
            @if (_forecasts == null)
            {
                <p><em>Loading...</em></p>
            }
            else
            {
                <table class="table">
                    <thead>
                        <tr>
                            <th>Date</th>
                            <th>Temp. (C)</th>
                            <th>Temp. (F)</th>
                            <th>Summary</th>
                            <th>&nbsp;</th>
                            <th>&nbsp;</th>
                        </tr>
                    </thead>
                    <tfoot>
                        <tr>
                            <th>Date</th>
                            <th>Temp. (C)</th>
                            <th>Temp. (F)</th>
                            <th>Summary</th>
                            <th>&nbsp;</th>
                            <th>&nbsp;</th>
                        </tr>
                    </tfoot>
                    <tbody>
                        @foreach (var forecast in _forecasts)
                        {
                            <tr>
                                <td>@forecast.Date.ToShortDateString()</td>
                                <td>@forecast.TemperatureC</td>
                                <td>@forecast.TemperatureF</td>
                                <td>@forecast.Summary</td>
                                <td><button type="button" class="button is-small" 
                                            @onclick="() => DeleteForecast(forecast)">
                                            <i class="fas fa-trash"></i>
                                </button></td>
                                <td><button type="button" class="button is-small">
                                    <i class="fas fa-edit"></i>
                                </button></td>
                            </tr>
                        }
                    </tbody>
                </table>
                <button type="button" class="button is-info" onclick="@AddNewForecast">Add new</button>
            }
        </div>
    </div>
</section>
 
 
 @code {

    private DbSet<WeatherForecast>? _forecasts;
    private SmartBlazorDbContext? _context;

    protected override async Task OnInitializedAsync()
    {
        _context = await _dbFactory.CreateDbContextAsync();
        if (_context?.WeatherForecasts != null)
        {
            _forecasts = _context.WeatherForecasts;
        }
        await base.OnInitializedAsync();
    }
     
     private void AddNewForecast()
     {
         if (_context?.WeatherForecasts == null) return;
         _context.Add(new WeatherForecast()
         {
             Date = new DateTime(),
             TemperatureC = 30,
             Summary = "Freezing"
             
         });
         _context.SaveChanges();
     }

    private void DeleteForecast(WeatherForecast forecast)
    {
        if (_context?.WeatherForecasts == null) return;
        _context.Remove(forecast);
        _context.SaveChanges();
    }

    public void Dispose()
    {
        _context?.Dispose();
    }
}
