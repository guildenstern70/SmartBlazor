 @**
  
  Project SmartBlazor
  Copyright (C) 2021 Alessio Saltarin 'alessiosaltarin@gmail.com'
  This software is licensed under MIT License. See LICENSE.
  
 **@

@page "/fetchdata"

<PageTitle>Weather forecast</PageTitle>

@using Microsoft.EntityFrameworkCore
@using SmartBlazor.Data
@using SmartBlazor.Service

@implements IDisposable
@inject IDbContextFactory<SmartBlazorDbContext> DbFactory

<section class="section">

    <SmartBlazor.Components.PageHeader Title="Weather forecast" />

    <div>
        <p>Weather Forecast Service:</p>
        <div class="mt-4">
            @if (Forecasts == null)
            {
                <p><em>Loading...</em></p>
            }
            else
            {
                <table class="table">
                    <thead>
                        <tr>
                            <th>Date</th>
                            <th>Temp. (C)</th>
                            <th>Temp. (F)</th>
                            <th>Summary</th>
                            <th>&nbsp;</th>
                            <th>&nbsp;</th>
                        </tr>
                    </thead>
                    <tfoot>
                        <tr>
                            <th>Date</th>
                            <th>Temp. (C)</th>
                            <th>Temp. (F)</th>
                            <th>Summary</th>
                            <th>&nbsp;</th>
                            <th>&nbsp;</th>
                        </tr>
                    </tfoot>
                    <tbody>
                        @foreach (var forecast in Forecasts)
                        {
                            <tr>
                                <td>@forecast.Date.ToShortDateString()</td>
                                <td>@forecast.TemperatureC</td>
                                <td>@forecast.TemperatureF</td>
                                <td>@forecast.Summary</td>
                                <td><button type="button" class="button is-small"><i class="fas fa-trash"></i></button></td>
                                <td><button type="button" class="button is-small"><i class="fas fa-edit"></i></button></td>
                            </tr>
                        }
                    </tbody>
                </table>
                <button type="button" class="button is-info">Add new</button>
            }
        </div>
    </div>
</section>



@code {

    private DbSet<WeatherForecast>? Forecasts;
    private SmartBlazorDbContext? Context;

    protected override async Task OnInitializedAsync()
    {
        Context = DbFactory.CreateDbContext();
        if (Context is not null && Context.WeatherForecasts is not null)
        {
            this.Forecasts = Context.WeatherForecasts;
        }
        await base.OnInitializedAsync();
    }

    public void Dispose()
    {
        Context?.Dispose();
    }
}
